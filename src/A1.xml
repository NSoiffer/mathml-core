<!DOCTYPE html>
<html>
<head>
<title>A MathML‣ MathML in HTML5 - Implementation Note</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

</head>
<body>
<section id="fullmathml">
<h1>MathML</h1>
<div></div>

<div id="p1">
<p><span>This section is non-normative.</span></p>
</div>
<div id="p2">
<p>The <code>mstyle</code> element duplicates the CSS inheritance mechanism in a
CSS-incompatible way and has many exceptions to workaround the fact that
attribute names may be used for different purposes. In practice, many of its
attributes are not useful and never used. It is a burden for implementers since
they essentially have to reimplement a specific “attribute” inheritance
mechanism to support the general case even if the most prominent attributes
have obvious mapping to CSS. It is also a performance issue to perform the
rendering and keep it up-to-date since the rendering on any node may depend on
its <code>mstyle</code> ancestors. In this document, it instead suggested to keep only
attributes that are compatible with CSS and five new CSS properties are
introduced in section <a href="S2.html#SS3.SSS1" title="2.3.1 Properties ‣ 2.3 CSS Styling ‣ 2 Relation with other technologies ‣ MathML in HTML5 - Implementation Note"><span>2.3.1</span></a>.
These attributes actually correspond to what is used in practice.</p>
</div>
<div id="p3">
<p>The <span>&lt;mfenced&gt;</span> element is just a
“convenient form in which to express common constructs involving fences”
but is strictly equivalent to an expanded form with <span>&lt;mrow&gt;</span> and
<span>&lt;mo&gt;</span> elements and has many exceptions to handle.
It is thus not actually necessary and just requires more
code for implementers and may lead to rendering inconsistencies with the
expanded form. It requires web rendering engines to create many
“anonymous” rendering frames (or similar) and keep them up-to-date which may
lead to rendering, performance or security issues. Because the text of fences
and separators is included in attributes and not in MathML elements then by
default it may not be possible to search, select, copy it. It may also not be
exposed to assitive technologies without further effort. In this document
support for <code>mfenced</code> is not required.
Authors are encouraged to use the expanded form and we recommend that the
element is dropped from future version of the MathML specification.</p>
</div>
<div id="p4">
<p>The “radical” notation of the <span>&lt;menclose&gt;</span> element is equivalent to the
<span>&lt;msqrt&gt;</span> element. Again, this adds duplicate logic for visual rendering and
exposure to assistive technologies. In practice, the <span>&lt;msqrt&gt;</span> is always
used for square roots. We suggest to remove the “radical” notation in
future version of the MathML specification.</p>
</div>
<div id="p5">
<p>As explained in section <a href="S3.html#SS1.SSS2" title="3.1.2 Layout Steps ‣ 3.1 Introduction ‣ 3 Presentation Markup ‣ MathML in HTML5 - Implementation Note"><span>3.1.2</span></a> it is important in a
HTML5 context to be able to determine the min-content width and the max-content
width for linebreaking purpose. However, the <code>mpadded</code> element may be
problematic since the pseudo-units allow horizontal metrics to depend on
vertical metrics. A restriction is proposed in section <a href="S3.html#SS3.SSS6" title="3.3.6 Adjust Space Around Content &lt;mpadded&gt; ‣ 3.3 General Layout Schemata ‣ 3 Presentation Markup ‣ MathML in HTML5 - Implementation Note"><span>3.3.6</span></a> and should
not be problematic in practice.</p>
</div>
<div id="p6">
<p>The TeXBook’s Appendix G as well as the OpenType MATH table rely on the
“cramped” concept to adjust spacing. This is absent from the MathML
specification. A simple way to determine when an element is cramped is
proposed in section .</p>
</div>
</section>
</body>
</html>
